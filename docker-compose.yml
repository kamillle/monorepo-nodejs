version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: monorepo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: monorepo_dev
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: monorepo-api
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/monorepo_dev
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    command: pnpm --filter api dev

  web:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: monorepo-web
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    volumes:
      - ./apps/frontend/app:/app/apps/frontend/app
      - ./apps/frontend/public:/app/apps/frontend/public
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/frontend/node_modules
      - /app/apps/frontend/.next
    depends_on:
      - api
    command: pnpm --filter frontend dev

volumes:
  postgres_data:

